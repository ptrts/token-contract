PragmaDirective
   Source: "pragma solidity ^0.4.13;"
ContractDefinition "TokenRecipient"
   Source: "contract TokenRecipient {\n\n    // \xd0\x9f\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb8\xd1\x82\xd1\x8c \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x87\xd1\x8c\xd0\xb8\xd1\x85-\xd1\x82\xd0\xbe \xd1\x87\xd1\x83\xd0\xb6\xd0\xb8\xd1\x85 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe-\xd1\x82\xd0\xbe \xd0\xb2\xd0\xb8\xd0\xb4\xd0\xb0\n    function receiveApproval(\n\n    // \xd0\x9a\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbb \xd1\x82\xd0\xb5\xd0\xb1\xd0\xb5 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb8 \xd1\x81 \xd1\x87\xd1\x8c\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x82\xd1\x8b \xd1\x81\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n    address _from,\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x82\xd1\x8b \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n    uint256 _value,\n\n    // \xd0\x90\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xbe\xd0\xb1\xd1\x81\xd0\xbb\xd1\x83\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd1\x8e\xd1\x89\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb2\xd0\xb8\xd0\xb4 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n    address _token,\n\n    // \xd0\x9a\xd0\xb0\xd0\xba\xd0\xb8\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x81 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb8\xd0\xbb \xd0\xba \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb5\xd0\xbc\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8e \n    bytes _extraData\n    );\n}"
  FunctionDefinition "receiveApproval" - public
     Source: "function receiveApproval(\n\n    // \xd0\x9a\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbb \xd1\x82\xd0\xb5\xd0\xb1\xd0\xb5 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb8 \xd1\x81 \xd1\x87\xd1\x8c\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x82\xd1\x8b \xd1\x81\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n    address _from,\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x82\xd1\x8b \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n    uint256 _value,\n\n    // \xd0\x90\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xbe\xd0\xb1\xd1\x81\xd0\xbb\xd1\x83\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd1\x8e\xd1\x89\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb2\xd0\xb8\xd0\xb4 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n    address _token,\n\n    // \xd0\x9a\xd0\xb0\xd0\xba\xd0\xb8\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x81 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb8\xd0\xbb \xd0\xba \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb5\xd0\xbc\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8e \n    bytes _extraData\n    );"
    ParameterList
       Source: "(\n\n    // \xd0\x9a\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbb \xd1\x82\xd0\xb5\xd0\xb1\xd0\xb5 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb8 \xd1\x81 \xd1\x87\xd1\x8c\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x82\xd1\x8b \xd1\x81\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n    address _from,\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x82\xd1\x8b \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n    uint256 _value,\n\n    // \xd0\x90\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xbe\xd0\xb1\xd1\x81\xd0\xbb\xd1\x83\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd1\x8e\xd1\x89\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb2\xd0\xb8\xd0\xb4 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n    address _token,\n\n    // \xd0\x9a\xd0\xb0\xd0\xba\xd0\xb8\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x81 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb8\xd0\xbb \xd0\xba \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb5\xd0\xbc\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8e \n    bytes _extraData\n    )"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_token"
         Type: address
         Source: "address _token"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_extraData"
         Type: bytes memory
         Source: "bytes _extraData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
ContractDefinition "Owned"
   Source: "contract Owned {\n\n    address public owner;\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}"
  VariableDeclaration "owner"
     Type: address
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Owned" - public
     Source: "function Owned() {\n        owner = msg.sender;\n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{\n        owner = msg.sender;\n    }"
      ExpressionStatement
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }"
    ParameterList
       Source: ""
    Block
       Source: "{\n        require(msg.sender == owner);\n        _;\n    }"
      ExpressionStatement
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }"
    ParameterList
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    ModifierInvocation "onlyOwner"
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\n        owner = newOwner;\n    }"
      ExpressionStatement
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
ContractDefinition "TokenContract"
   Source: "contract TokenContract is Owned {\n\n    // \xd0\x9f\xd1\x83\xd0\xb1\xd0\xbb\xd0\xb8\xd1\x87\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0.\n\n    // \xd0\x9a\xd0\xb0\xd0\xb6\xd0\xb4\xd1\x8b\xd0\xb9 \xd1\x81\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x82 \xd1\x83\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb8\xd1\x85 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f.\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    // \xd0\x92\xd0\xb5\xd1\x80\xd1\x81\xd0\xb8\xd1\x8f \xd0\xb8\xd0\xbd\xd1\x82\xd0\xb5\xd1\x80\xd1\x84\xd0\xb5\xd0\xb9\xd1\x81\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    string public standard = 'Token 0.1';\n\n    // \xd0\x9d\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    string public name;\n\n    // \xd0\xa1\xd0\xb8\xd0\xbc\xd0\xb2\xd0\xbe\xd0\xbb \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    string public symbol;\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd1\x87\xd0\xb5\xd0\xba \xd0\xbf\xd0\xbe\xd1\x81\xd0\xbb\xd0\xb5 \xd0\xb7\xd0\xb0\xd0\xbf\xd1\x8f\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x83 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xb9 \xd0\xbc\xd0\xb0\xd0\xbb\xd0\xb5\xd0\xbd\xd1\x8c\xd0\xba\xd0\xbe\xd0\xb9 \xd0\xb4\xd0\xbe\xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xb8\xd0\xbc\xd0\xbe\xd0\xb9 \xd0\xb4\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xb8 \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    uint8 public decimals;\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x81\xd0\xb5\xd0\xb9\xd1\x87\xd0\xb0\xd1\x81 \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xb2\xd1\x81\xd0\xb5\xd0\xb3\xd0\xbe\n    uint256 public totalSupply;\n\n    // \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd0\xb0\n    mapping (address => uint256) public balanceOf;\n\n    // \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd0\xbe\xd0\xb2 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb4\xd1\x80\xd1\x83\xd0\xb7\xd0\xb5\xd0\xb9 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0, \xd1\x83 \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // \xd0\xa1\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5 \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb5 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc,\xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbb \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4 \xd1\x81\xd1\x80\xd0\xb5\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2: \xd0\xba\xd1\x82\xd0\xbe, \xd0\xba\xd0\xbe\xd0\xbc\xd1\x83, \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // \xd0\xa1\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbd\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd0\xbb \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n    event Burn(address indexed from, uint256 value);\n\n    // \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n    // \xd0\xa3\xd0\xba\xd0\xb0\xd0\xb7\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbd\xd0\xb5 \xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xbd\xd0\xbe \xd0\xb8 \xd0\xbe\xd1\x82\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd1\x85\xd0\xb0\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5\xd1\x80\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    // \xd0\x92\xd0\xbe\xd0\xbf\xd1\x80\xd0\xbe\xd1\x81. \xd0\x9c\xd1\x8b \xd1\x8d\xd1\x82\xd0\xbe\xd1\x82 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82 \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd0\xbc \xd0\xba\xd0\xbe\xd0\xbc\xd0\xbf\xd0\xb8\xd0\xbb\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb8 \xd0\xb4\xd0\xb5\xd0\xbf\xd0\xbb\xd0\xbe\xd0\xb8\xd1\x82\xd1\x8c \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb9-\xd1\x82\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb7\xd0\xb0\xd0\xba\xd1\x86\xd0\xb8\xd0\xb5\xd0\xb9. \n    // \xd0\x93\xd0\xb4\xd0\xb5 \xd0\xbc\xd1\x8b \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd0\xbc \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd1\x8b\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbf\xd0\xb0\xd1\x80\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80\xd1\x8b \xd0\xb4\xd0\xbb\xd1\x8f \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8? \xd0\xad\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xba\xd0\xbe\xd0\xbc\xd0\xbf\xd0\xb8\xd0\xbb\xd1\x8f\xd1\x86\xd0\xb8\xd0\xb8? \xd0\xad\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xb4\xd0\xb5\xd0\xbf\xd0\xbb\xd0\xbe\xd0\xb5? \n    // \xd0\x9a\xd0\xb0\xd0\xba \xd0\xba\xd0\xbe\xd0\xbd\xd0\xba\xd1\x80\xd0\xb5\xd1\x82\xd0\xbd\xd0\xbe \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd1\x8b\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd1\x8d\xd1\x82\xd0\xb8 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f?\n    function TokenContract(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        uint256 _buyPrice,\n        uint256 _sellPrice\n    ) {\n        owner = msg.sender;\n\n        // \xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbc \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[this] = initialSupply;\n\n        // \xd0\xa3\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81 \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xb0\xd1\x81\xd0\xbe\xd0\xbc\n        totalSupply = initialSupply;\n\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n\n        buyPrice = _buyPrice;\n        sellPrice = _sellPrice;\n    }\n\n    // \xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\n    function transfer(address _to, uint256 _value) {\n\n        // \xd0\x95\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x8b\xd1\x82\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82, \xd1\x82\xd0\xbe \xd0\xb2\xd1\x8b\xd0\xb1\xd1\x80\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb8\xd1\x81\xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[msg.sender] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbc\xd1\x8b \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x82\xd0\xb0\xd0\xba\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd1\x83 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83, \xd0\xb8 \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbe\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xb0\xd0\xbb\xd0\xb0 \xd0\xbd\xd0\xb5 \xd0\xb1\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb5, \xd0\xb0 \xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb5, \n        // \xd1\x82\xd0\xbe \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd1\x82, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        // \xd0\x9e\xd1\x82\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[msg.sender] -= _value;\n\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xba \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] += _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        Transfer(msg.sender, _to, _value);\n    }\n\n    // \xd0\x92\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd1\x82 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xbc\xd1\x83 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x85 \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe-\xd1\x82\xd0\xbe \xd0\xbc\xd0\xb0\xd0\xba\xd1\x81\xd0\xb8\xd0\xbc\xd1\x83\xd0\xbc\xd0\xb0\n    // \xd0\x92\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd0\xba\xd0\xb0\xd0\xba \xd0\xb1\xd1\x8b \xd0\xbe\xd1\x82\xd0\xba\xd1\x80\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd1\x82 \xd0\xb2\xd0\xbd\xd1\x83\xd1\x82\xd1\x80\xd0\xb8 \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xb5\xd1\x89\xd0\xb5 \xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbd \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8\n    // \xd0\x9f\xd0\xbe \xd0\xb8\xd0\xbd\xd1\x82\xd0\xb5\xd1\x80\xd1\x84\xd0\xb5\xd0\xb9\xd1\x81\xd1\x83, \xd1\x8d\xd1\x82\xd0\xbe\xd1\x82 \xd0\xbc\xd0\xb5\xd1\x82\xd0\xbe\xd0\xb4 \xd0\xb4\xd0\xbe\xd0\xbb\xd0\xb6\xd0\xb5\xd0\xbd \xd0\xb2\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd1\x82\xd1\x8c \xd1\x84\xd0\xbb\xd0\xb0\xd0\xb3 \xd1\x83\xd1\x81\xd0\xbf\xd0\xb5\xd1\x88\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8\n    // \xd0\x9d\xd0\xb0\xd1\x88\xd0\xb0 \xd1\x80\xd0\xb5\xd0\xb0\xd0\xbb\xd0\xb8\xd0\xb7\xd0\xb0\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb2\xd1\x81\xd0\xb5\xd0\xb3\xd0\xb4\xd0\xb0 \xd0\xb2\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd1\x82 true\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    // \xd0\x92\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb4\xd0\xb0\xd0\xb5\xd1\x82 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xbc\xd1\x83 \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd1\x83 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x81 \xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n    // \xd0\x9f\xd1\x80\xd0\xb8\xd1\x87\xd0\xb5\xd0\xbc, \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 - \xd1\x8d\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82, \xd1\x83 \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbc\xd0\xb5\xd1\x82\xd0\xbe\xd0\xb4, \xd1\x87\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb7 \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb9 \xd0\xb5\xd0\xb3\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe \xd1\x83\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xb8\xd1\x82\xd1\x8c, \n    // \xd1\x87\xd1\x82\xd0\xbe \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd0\xbe\xd0\xbd \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x82 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n\n        // \xd0\xa3\xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c\xd1\x81\xd1\x8f, \xd1\x87\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd1\x82 \xd1\x83\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbe \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb5 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n        TokenRecipient spender = TokenRecipient(_spender);\n\n        // \xd0\x94\xd0\xb0\xd1\x82\xd1\x8c \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        if (approve(_spender, _value)) {\n\n            // \xd0\xa3\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xb8\xd1\x82\xd1\x8c, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbe \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }\n    }\n\n    // \xd0\x9d\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe, \xd0\xba\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd0\xbd\xd0\xb5\xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb4\xd0\xb0\xd0\xbb \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \n    // \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd1\x8d\xd1\x82\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb9-\xd1\x82\xd0\xbe \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe\xd0\xb1\xd1\x8b \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbd\xd1\x83\xd0\xbb\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        require(balanceOf[_from] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbd\xd0\xb5 \xd0\xbb\xd0\xbe\xd0\xbf\xd0\xbd\xd0\xb5\xd1\x82 \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe \xd0\xbb\xd0\xb8 \xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd1\x83 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        require(_value <= allowance[_from][msg.sender]);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        balanceOf[_from] -= _value;\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] += _value;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xb8\xd0\xb7 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81 \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        allowance[_from][msg.sender] -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xb0 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb0\xd1\x87\xd0\xb0 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85\n        Transfer(_from, _to, _value);\n\n        // \xd0\xa1\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd0\xb7\xd0\xb0\xd0\xba\xd0\xbe\xd0\xbd\xd1\x87\xd0\xb8\xd0\xbb\xd0\xbe\xd1\x81\xd1\x8c \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\n        return true;\n    }\n\n    // \xd0\x92\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb8 \xd1\x81\xd1\x80\xd0\xb5\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0\n    function burn(uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[msg.sender] >= _value);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x81 \xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        balanceOf[msg.sender] -= _value;\n\n        // \xd0\xa3\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Burn(msg.sender, _value);\n\n        return true;\n    }\n\n    // \xd0\x94\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0\n    function burnFrom(address _from, uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd1\x85\xd0\xbe\xd0\xb7\xd1\x8f\xd0\xb8\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[_from] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xbe \xd0\xbb\xd0\xb8 \xd0\xb4\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xbb\xd0\xb8\xd1\x86\xd1\x83 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n        require(_value <= allowance[_from][msg.sender]);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0\n        balanceOf[_from] -= _value;\n\n        // \xd0\xa3\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Burn(_from, _value);\n\n        // \xd0\x92\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\n        return true;\n    }\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd1\x8c \xd0\xba\xd0\xbe\xd0\xbc\xd1\x83-\xd1\x82\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        balanceOf[target] += mintedAmount;\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd1\x8c \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply += mintedAmount;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbb \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3 \xd0\xb8\xd0\xb7 \xd0\xbd\xd0\xb8\xd0\xbe\xd1\x82\xd0\xba\xd1\x83\xd0\xb4\xd0\xb0 \xd0\xbd\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n        Transfer(0, this, mintedAmount);\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3 \xd0\xbe\xd1\x82 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x88\xd1\x8c \xd0\xb2\xd1\x8b\xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n        if (target != address(this)) {\n            Transfer(this, target, mintedAmount);\n        }\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function() payable onlyOwner {\n    }\n\n    // \xd0\x9d\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb0\xd0\xbb \xd0\xbd\xd0\xb0\xd0\xbc \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd1\x87\xd1\x82\xd0\xbe\xd0\xb1\xd1\x8b \xd0\xba\xd1\x83\xd0\xbf\xd0\xb8\xd1\x82\xd1\x8c \xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb8\xd1\x85 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xbf\xd0\xbe \xd1\x82\xd0\xb5\xd0\xba\xd1\x83\xd1\x89\xd0\xb5\xd0\xb9 \xd1\x86\xd0\xb5\xd0\xbd\xd0\xb5\n    function buyOnBehalfOf(address buyer) payable returns (uint amount) {\n        \n        require(buyer > 0x0);\n    \n        // \xd0\x9a \xd0\xbd\xd0\xb0\xd0\xbc \xd0\xb2 \xd1\x82\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb7\xd0\xb0\xd0\xba\xd1\x86\xd0\xb8\xd1\x8e \xd0\xbf\xd1\x80\xd0\xb8\xd1\x88\xd0\xbb\xd0\xbe \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2\n        // \xd0\x9a \xd1\x8d\xd1\x82\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd1\x83 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2 \xd0\xbc\xd1\x8b \xd0\xb8\xd0\xbc\xd0\xb5\xd0\xb5\xd0\xbc \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf \xd1\x87\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb7 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe:\n        //      msg.value\n    \n        // \xd0\x92\xd1\x8b\xd1\x8f\xd1\x81\xd0\xbd\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2 \xd1\x85\xd0\xb2\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb5 \xd0\xbd\xd0\xb0\xd0\xbc \xd0\xbf\xd1\x80\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb0\xd0\xbb\xd0\xb8\n        amount = msg.value / buyPrice;\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbc\xd1\x8b \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbb\xd0\xb5\xd0\xb6\xd0\xb0\xd1\x82 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n        // \xd0\x9d\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xb0 \xd0\xbf\xd1\x80\xd1\x8f\xd0\xbc\xd0\xbe \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5 \xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xbe\xd1\x87\xd0\xbd\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xba\xd1\x83\xd0\xbf\xd0\xba\xd0\xb8\n        require(amount <= balanceOf[this]);\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xbe\xd0\xba\xd1\x83\xd0\xbf\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8e \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        balanceOf[buyer] += amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbb\xd0\xb5\xd0\xb6\xd0\xb0\xd1\x89\xd0\xb8\xd0\xb5 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n        balanceOf[this] -= amount;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Transfer(this, buyer, amount);\n\n        // \xd0\x92\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xba\xd1\x83\xd0\xbf\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        return amount;\n    }\n\n    // \xd0\x9d\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82 \xd0\xb7\xd0\xb0\xd0\xb1\xd1\x80\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb5\xd0\xb3\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xb8 \xd0\xb2\xd1\x8b\xd1\x81\xd0\xbb\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb5\xd0\xbc\xd1\x83 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xb2 \xd1\x81\xd0\xbe\xd0\xbe\xd1\x82\xd0\xb2\xd0\xb5\xd1\x82\xd1\x81\xd1\x82\xd0\xb2\xd0\xb8\xd0\xb8 \xd1\x81 \xd1\x82\xd0\xb5\xd0\xba\xd1\x83\xd1\x89\xd0\xb5\xd0\xb9 \xd1\x86\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd0\xb6\xd0\xb8\n    function sell(uint amount) returns (uint revenue){\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd1\x83 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbe\xd0\xbd \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd1\x82\xd1\x8c  \n        require(amount <= balanceOf[msg.sender]);\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x8d\xd1\x82\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n        balanceOf[this] += amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f\n        balanceOf[msg.sender] -= amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xbc\xd1\x8b \xd0\xb5\xd0\xbc\xd1\x83 \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd0\xb4\xd0\xbe\xd0\xbb\xd0\xb6\xd0\xbd\xd1\x8b\n        revenue = amount * sellPrice;\n\n        // sends ether to the seller: it's important\n        require(msg.sender.send(revenue));\n\n        // executes an event reflecting on the change\n        Transfer(msg.sender, this, amount);\n\n        // ends function and returns\n        return revenue;\n    }\n}"
  InheritanceSpecifier
     Source: "Owned"
    UserDefinedTypeName "Owned"
       Source: "Owned"
  VariableDeclaration "sellPrice"
     Type: uint256
     Source: "uint256 public sellPrice"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "buyPrice"
     Type: uint256
     Source: "uint256 public buyPrice"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "standard"
     Type: string storage ref
     Source: "string public standard = 'Token 0.1'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Token 0.1
       Type: literal_string "Token 0.1"
       Source: "'Token 0.1'"
  VariableDeclaration "name"
     Type: string storage ref
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "symbol"
     Type: string storage ref
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Source: "mapping (address => uint256) public balanceOf"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowance"
     Type: mapping(address => mapping(address => uint256))
     Source: "mapping (address => mapping (address => uint256)) public allowance"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed from, address indexed to, uint256 value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Burn"
     Source: "event Burn(address indexed from, uint256 value);"
    ParameterList
       Source: "(address indexed from, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "TokenContract" - public
     Source: "function TokenContract(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        uint256 _buyPrice,\n        uint256 _sellPrice\n    ) {\n        owner = msg.sender;\n\n        // \xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbc \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[this] = initialSupply;\n\n        // \xd0\xa3\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81 \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xb0\xd1\x81\xd0\xbe\xd0\xbc\n        totalSupply = initialSupply;\n\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n\n        buyPrice = _buyPrice;\n        sellPrice = _sellPrice;\n    }"
    ParameterList
       Source: "(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        uint256 _buyPrice,\n        uint256 _sellPrice\n    )"
      VariableDeclaration "initialSupply"
         Type: uint256
         Source: "uint256 initialSupply"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "tokenName"
         Type: string memory
         Source: "string tokenName"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "decimalUnits"
         Type: uint8
         Source: "uint8 decimalUnits"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "tokenSymbol"
         Type: string memory
         Source: "string tokenSymbol"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_buyPrice"
         Type: uint256
         Source: "uint256 _buyPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sellPrice"
         Type: uint256
         Source: "uint256 _sellPrice"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        owner = msg.sender;\n\n        // \xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbc \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[this] = initialSupply;\n\n        // \xd0\xa3\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81 \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xb0\xd1\x81\xd0\xbe\xd0\xbc\n        totalSupply = initialSupply;\n\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n\n        buyPrice = _buyPrice;\n        sellPrice = _sellPrice;\n    }"
      ExpressionStatement
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Source: "balanceOf[this] = initialSupply"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[this] = initialSupply"
          IndexAccess
             Type: uint256
             Source: "balanceOf[this]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier this
               Type: contract TokenContract
               Source: "this"
          Identifier initialSupply
             Type: uint256
             Source: "initialSupply"
      ExpressionStatement
         Source: "totalSupply = initialSupply"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = initialSupply"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier initialSupply
             Type: uint256
             Source: "initialSupply"
      ExpressionStatement
         Source: "name = tokenName"
        Assignment using operator =
           Type: string storage ref
           Source: "name = tokenName"
          Identifier name
             Type: string storage ref
             Source: "name"
          Identifier tokenName
             Type: string memory
             Source: "tokenName"
      ExpressionStatement
         Source: "symbol = tokenSymbol"
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = tokenSymbol"
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Identifier tokenSymbol
             Type: string memory
             Source: "tokenSymbol"
      ExpressionStatement
         Source: "decimals = decimalUnits"
        Assignment using operator =
           Type: uint8
           Source: "decimals = decimalUnits"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Identifier decimalUnits
             Type: uint8
             Source: "decimalUnits"
      ExpressionStatement
         Source: "buyPrice = _buyPrice"
        Assignment using operator =
           Type: uint256
           Source: "buyPrice = _buyPrice"
          Identifier buyPrice
             Type: uint256
             Source: "buyPrice"
          Identifier _buyPrice
             Type: uint256
             Source: "_buyPrice"
      ExpressionStatement
         Source: "sellPrice = _sellPrice"
        Assignment using operator =
           Type: uint256
           Source: "sellPrice = _sellPrice"
          Identifier sellPrice
             Type: uint256
             Source: "sellPrice"
          Identifier _sellPrice
             Type: uint256
             Source: "_sellPrice"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) {\n\n        // \xd0\x95\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x8b\xd1\x82\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82, \xd1\x82\xd0\xbe \xd0\xb2\xd1\x8b\xd0\xb1\xd1\x80\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb8\xd1\x81\xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[msg.sender] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbc\xd1\x8b \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x82\xd0\xb0\xd0\xba\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd1\x83 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83, \xd0\xb8 \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbe\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xb0\xd0\xbb\xd0\xb0 \xd0\xbd\xd0\xb5 \xd0\xb1\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb5, \xd0\xb0 \xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb5, \n        // \xd1\x82\xd0\xbe \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd1\x82, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        // \xd0\x9e\xd1\x82\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[msg.sender] -= _value;\n\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xba \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] += _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        Transfer(msg.sender, _to, _value);\n    }"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\n        // \xd0\x95\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x8b\xd1\x82\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82, \xd1\x82\xd0\xbe \xd0\xb2\xd1\x8b\xd0\xb1\xd1\x80\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb8\xd1\x81\xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[msg.sender] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbc\xd1\x8b \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x82\xd0\xb0\xd0\xba\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd1\x83 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83, \xd0\xb8 \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbe\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xb0\xd0\xbb\xd0\xb0 \xd0\xbd\xd0\xb5 \xd0\xb1\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb5, \xd0\xb0 \xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb5, \n        // \xd1\x82\xd0\xbe \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd1\x82, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        // \xd0\x9e\xd1\x82\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[msg.sender] -= _value;\n\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xba \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] += _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        Transfer(msg.sender, _to, _value);\n    }"
      ExpressionStatement
         Source: "require(_to > 0x0)"
        FunctionCall
           Type: tuple()
           Source: "require(_to > 0x0)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_to > 0x0"
            Identifier _to
               Type: address
               Source: "_to"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
      ExpressionStatement
         Source: "require(balanceOf[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[msg.sender] >= _value)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[msg.sender]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_to] + _value >= balanceOf[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balanceOf[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_to]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "balanceOf[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256) constant
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }"
      ExpressionStatement
         Source: "allowance[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowance[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowance[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[msg.sender]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approveAndCall" - public
     Source: "function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n\n        // \xd0\xa3\xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c\xd1\x81\xd1\x8f, \xd1\x87\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd1\x82 \xd1\x83\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbe \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb5 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n        TokenRecipient spender = TokenRecipient(_spender);\n\n        // \xd0\x94\xd0\xb0\xd1\x82\xd1\x8c \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        if (approve(_spender, _value)) {\n\n            // \xd0\xa3\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xb8\xd1\x82\xd1\x8c, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbe \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }\n    }"
    ParameterList
       Source: "(address _spender, uint256 _value, bytes _extraData)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_extraData"
         Type: bytes memory
         Source: "bytes _extraData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n\n        // \xd0\xa3\xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c\xd1\x81\xd1\x8f, \xd1\x87\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd1\x82 \xd1\x83\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbe \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb5 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n        TokenRecipient spender = TokenRecipient(_spender);\n\n        // \xd0\x94\xd0\xb0\xd1\x82\xd1\x8c \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        if (approve(_spender, _value)) {\n\n            // \xd0\xa3\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xb8\xd1\x82\xd1\x8c, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbe \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }\n    }"
      VariableDeclarationStatement
         Source: "TokenRecipient spender = TokenRecipient(_spender)"
        VariableDeclaration "spender"
           Type: contract TokenRecipient
           Source: "TokenRecipient spender"
          UserDefinedTypeName "TokenRecipient"
             Source: "TokenRecipient"
        FunctionCall
           Type: contract TokenRecipient
           Source: "TokenRecipient(_spender)"
          Identifier TokenRecipient
             Type: type(contract TokenRecipient)
             Source: "TokenRecipient"
          Identifier _spender
             Type: address
             Source: "_spender"
      IfStatement
         Source: "if (approve(_spender, _value)) {\n\n            // \xd0\xa3\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xb8\xd1\x82\xd1\x8c, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbe \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }"
        FunctionCall
           Type: bool
           Source: "approve(_spender, _value)"
          Identifier approve
             Type: function (address,uint256) returns (bool)
             Source: "approve"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
        Block
           Source: "{\n\n            // \xd0\xa3\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xb8\xd1\x82\xd1\x8c, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbe \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }"
          ExpressionStatement
             Source: "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            FunctionCall
               Type: tuple()
               Source: "spender.receiveApproval(msg.sender, _value, this, _extraData)"
              MemberAccess to member receiveApproval
                 Type: function (address,uint256,address,bytes memory) external
                 Source: "spender.receiveApproval"
                Identifier spender
                   Type: contract TokenRecipient
                   Source: "spender"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier this
                 Type: contract TokenContract
                 Source: "this"
              Identifier _extraData
                 Type: bytes memory
                 Source: "_extraData"
          Return
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe\xd0\xb1\xd1\x8b \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbd\xd1\x83\xd0\xbb\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        require(balanceOf[_from] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbd\xd0\xb5 \xd0\xbb\xd0\xbe\xd0\xbf\xd0\xbd\xd0\xb5\xd1\x82 \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe \xd0\xbb\xd0\xb8 \xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd1\x83 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        require(_value <= allowance[_from][msg.sender]);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        balanceOf[_from] -= _value;\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] += _value;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xb8\xd0\xb7 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81 \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        allowance[_from][msg.sender] -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xb0 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb0\xd1\x87\xd0\xb0 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85\n        Transfer(_from, _to, _value);\n\n        // \xd0\xa1\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd0\xb7\xd0\xb0\xd0\xba\xd0\xbe\xd0\xbd\xd1\x87\xd0\xb8\xd0\xbb\xd0\xbe\xd1\x81\xd1\x8c \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\n        return true;\n    }"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe\xd0\xb1\xd1\x8b \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbd\xd1\x83\xd0\xbb\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        require(balanceOf[_from] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbd\xd0\xb5 \xd0\xbb\xd0\xbe\xd0\xbf\xd0\xbd\xd0\xb5\xd1\x82 \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe \xd0\xbb\xd0\xb8 \xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd1\x83 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        require(_value <= allowance[_from][msg.sender]);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        balanceOf[_from] -= _value;\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] += _value;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xb8\xd0\xb7 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81 \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        allowance[_from][msg.sender] -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xb0 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb0\xd1\x87\xd0\xb0 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85\n        Transfer(_from, _to, _value);\n\n        // \xd0\xa1\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd0\xb7\xd0\xb0\xd0\xba\xd0\xbe\xd0\xbd\xd1\x87\xd0\xb8\xd0\xbb\xd0\xbe\xd1\x81\xd1\x8c \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\n        return true;\n    }"
      ExpressionStatement
         Source: "require(_to > 0x0)"
        FunctionCall
           Type: tuple()
           Source: "require(_to > 0x0)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_to > 0x0"
            Identifier _to
               Type: address
               Source: "_to"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
      ExpressionStatement
         Source: "require(balanceOf[_from] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[_from] >= _value)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_from] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_from]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_to] + _value >= balanceOf[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balanceOf[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_to]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Source: "require(_value <= allowance[_from][msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(_value <= allowance[_from][msg.sender])"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_value <= allowance[_from][msg.sender]"
            Identifier _value
               Type: uint256
               Source: "_value"
            IndexAccess
               Type: uint256
               Source: "allowance[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowance[_from]"
                Identifier allowance
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowance"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Source: "balanceOf[_from] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[_from] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "balanceOf[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "allowance[_from][msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "allowance[_from][msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "allowance[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[_from]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256) constant
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "burn" - public
     Source: "function burn(uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[msg.sender] >= _value);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x81 \xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        balanceOf[msg.sender] -= _value;\n\n        // \xd0\xa3\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Burn(msg.sender, _value);\n\n        return true;\n    }"
    ParameterList
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[msg.sender] >= _value);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x81 \xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        balanceOf[msg.sender] -= _value;\n\n        // \xd0\xa3\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Burn(msg.sender, _value);\n\n        return true;\n    }"
      ExpressionStatement
         Source: "require(balanceOf[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[msg.sender] >= _value)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[msg.sender]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "totalSupply -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "totalSupply -= _value"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "Burn(msg.sender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Burn(msg.sender, _value)"
          Identifier Burn
             Type: function (address,uint256) constant
             Source: "Burn"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "burnFrom" - public
     Source: "function burnFrom(address _from, uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd1\x85\xd0\xbe\xd0\xb7\xd1\x8f\xd0\xb8\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[_from] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xbe \xd0\xbb\xd0\xb8 \xd0\xb4\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xbb\xd0\xb8\xd1\x86\xd1\x83 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n        require(_value <= allowance[_from][msg.sender]);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0\n        balanceOf[_from] -= _value;\n\n        // \xd0\xa3\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Burn(_from, _value);\n\n        // \xd0\x92\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\n        return true;\n    }"
    ParameterList
       Source: "(address _from, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd1\x85\xd0\xbe\xd0\xb7\xd1\x8f\xd0\xb8\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[_from] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xbe \xd0\xbb\xd0\xb8 \xd0\xb4\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xbb\xd0\xb8\xd1\x86\xd1\x83 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n        require(_value <= allowance[_from][msg.sender]);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0\n        balanceOf[_from] -= _value;\n\n        // \xd0\xa3\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Burn(_from, _value);\n\n        // \xd0\x92\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\n        return true;\n    }"
      ExpressionStatement
         Source: "require(balanceOf[_from] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[_from] >= _value)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_from] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_from]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Source: "require(_value <= allowance[_from][msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(_value <= allowance[_from][msg.sender])"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_value <= allowance[_from][msg.sender]"
            Identifier _value
               Type: uint256
               Source: "_value"
            IndexAccess
               Type: uint256
               Source: "allowance[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowance[_from]"
                Identifier allowance
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowance"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Source: "balanceOf[_from] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[_from] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "totalSupply -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "totalSupply -= _value"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "Burn(_from, _value)"
        FunctionCall
           Type: tuple()
           Source: "Burn(_from, _value)"
          Identifier Burn
             Type: function (address,uint256) constant
             Source: "Burn"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "mintToken" - public
     Source: "function mintToken(address target, uint256 mintedAmount) onlyOwner {\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd1\x8c \xd0\xba\xd0\xbe\xd0\xbc\xd1\x83-\xd1\x82\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        balanceOf[target] += mintedAmount;\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd1\x8c \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply += mintedAmount;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbb \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3 \xd0\xb8\xd0\xb7 \xd0\xbd\xd0\xb8\xd0\xbe\xd1\x82\xd0\xba\xd1\x83\xd0\xb4\xd0\xb0 \xd0\xbd\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n        Transfer(0, this, mintedAmount);\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3 \xd0\xbe\xd1\x82 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x88\xd1\x8c \xd0\xb2\xd1\x8b\xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n        if (target != address(this)) {\n            Transfer(this, target, mintedAmount);\n        }\n    }"
    ParameterList
       Source: "(address target, uint256 mintedAmount)"
      VariableDeclaration "target"
         Type: address
         Source: "address target"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "mintedAmount"
         Type: uint256
         Source: "uint256 mintedAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    ModifierInvocation "onlyOwner"
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd1\x8c \xd0\xba\xd0\xbe\xd0\xbc\xd1\x83-\xd1\x82\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        balanceOf[target] += mintedAmount;\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd1\x8c \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply += mintedAmount;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbb \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3 \xd0\xb8\xd0\xb7 \xd0\xbd\xd0\xb8\xd0\xbe\xd1\x82\xd0\xba\xd1\x83\xd0\xb4\xd0\xb0 \xd0\xbd\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n        Transfer(0, this, mintedAmount);\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3 \xd0\xbe\xd1\x82 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x88\xd1\x8c \xd0\xb2\xd1\x8b\xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n        if (target != address(this)) {\n            Transfer(this, target, mintedAmount);\n        }\n    }"
      ExpressionStatement
         Source: "balanceOf[target] += mintedAmount"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[target] += mintedAmount"
          IndexAccess
             Type: uint256
             Source: "balanceOf[target]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier target
               Type: address
               Source: "target"
          Identifier mintedAmount
             Type: uint256
             Source: "mintedAmount"
      ExpressionStatement
         Source: "totalSupply += mintedAmount"
        Assignment using operator +=
           Type: uint256
           Source: "totalSupply += mintedAmount"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier mintedAmount
             Type: uint256
             Source: "mintedAmount"
      ExpressionStatement
         Source: "Transfer(0, this, mintedAmount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0, this, mintedAmount)"
          Identifier Transfer
             Type: function (address,address,uint256) constant
             Source: "Transfer"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier this
             Type: contract TokenContract
             Source: "this"
          Identifier mintedAmount
             Type: uint256
             Source: "mintedAmount"
      IfStatement
         Source: "if (target != address(this)) {\n            Transfer(this, target, mintedAmount);\n        }"
        BinaryOperation using operator !=
           Type: bool
           Source: "target != address(this)"
          Identifier target
             Type: address
             Source: "target"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract TokenContract
               Source: "this"
        Block
           Source: "{\n            Transfer(this, target, mintedAmount);\n        }"
          ExpressionStatement
             Source: "Transfer(this, target, mintedAmount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(this, target, mintedAmount)"
              Identifier Transfer
                 Type: function (address,address,uint256) constant
                 Source: "Transfer"
              Identifier this
                 Type: contract TokenContract
                 Source: "this"
              Identifier target
                 Type: address
                 Source: "target"
              Identifier mintedAmount
                 Type: uint256
                 Source: "mintedAmount"
  FunctionDefinition "setPrices" - public
     Source: "function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }"
    ParameterList
       Source: "(uint256 newSellPrice, uint256 newBuyPrice)"
      VariableDeclaration "newSellPrice"
         Type: uint256
         Source: "uint256 newSellPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "newBuyPrice"
         Type: uint256
         Source: "uint256 newBuyPrice"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    ModifierInvocation "onlyOwner"
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }"
      ExpressionStatement
         Source: "sellPrice = newSellPrice"
        Assignment using operator =
           Type: uint256
           Source: "sellPrice = newSellPrice"
          Identifier sellPrice
             Type: uint256
             Source: "sellPrice"
          Identifier newSellPrice
             Type: uint256
             Source: "newSellPrice"
      ExpressionStatement
         Source: "buyPrice = newBuyPrice"
        Assignment using operator =
           Type: uint256
           Source: "buyPrice = newBuyPrice"
          Identifier buyPrice
             Type: uint256
             Source: "buyPrice"
          Identifier newBuyPrice
             Type: uint256
             Source: "newBuyPrice"
  FunctionDefinition "" - public
     Source: "function() payable onlyOwner {\n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    ModifierInvocation "onlyOwner"
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\n    }"
  FunctionDefinition "buyOnBehalfOf" - public
     Source: "function buyOnBehalfOf(address buyer) payable returns (uint amount) {\n        \n        require(buyer > 0x0);\n    \n        // \xd0\x9a \xd0\xbd\xd0\xb0\xd0\xbc \xd0\xb2 \xd1\x82\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb7\xd0\xb0\xd0\xba\xd1\x86\xd0\xb8\xd1\x8e \xd0\xbf\xd1\x80\xd0\xb8\xd1\x88\xd0\xbb\xd0\xbe \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2\n        // \xd0\x9a \xd1\x8d\xd1\x82\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd1\x83 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2 \xd0\xbc\xd1\x8b \xd0\xb8\xd0\xbc\xd0\xb5\xd0\xb5\xd0\xbc \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf \xd1\x87\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb7 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe:\n        //      msg.value\n    \n        // \xd0\x92\xd1\x8b\xd1\x8f\xd1\x81\xd0\xbd\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2 \xd1\x85\xd0\xb2\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb5 \xd0\xbd\xd0\xb0\xd0\xbc \xd0\xbf\xd1\x80\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb0\xd0\xbb\xd0\xb8\n        amount = msg.value / buyPrice;\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbc\xd1\x8b \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbb\xd0\xb5\xd0\xb6\xd0\xb0\xd1\x82 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n        // \xd0\x9d\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xb0 \xd0\xbf\xd1\x80\xd1\x8f\xd0\xbc\xd0\xbe \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5 \xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xbe\xd1\x87\xd0\xbd\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xba\xd1\x83\xd0\xbf\xd0\xba\xd0\xb8\n        require(amount <= balanceOf[this]);\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xbe\xd0\xba\xd1\x83\xd0\xbf\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8e \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        balanceOf[buyer] += amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbb\xd0\xb5\xd0\xb6\xd0\xb0\xd1\x89\xd0\xb8\xd0\xb5 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n        balanceOf[this] -= amount;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Transfer(this, buyer, amount);\n\n        // \xd0\x92\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xba\xd1\x83\xd0\xbf\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        return amount;\n    }"
    ParameterList
       Source: "(address buyer)"
      VariableDeclaration "buyer"
         Type: address
         Source: "address buyer"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint amount)"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint amount"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\n        \n        require(buyer > 0x0);\n    \n        // \xd0\x9a \xd0\xbd\xd0\xb0\xd0\xbc \xd0\xb2 \xd1\x82\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb7\xd0\xb0\xd0\xba\xd1\x86\xd0\xb8\xd1\x8e \xd0\xbf\xd1\x80\xd0\xb8\xd1\x88\xd0\xbb\xd0\xbe \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2\n        // \xd0\x9a \xd1\x8d\xd1\x82\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd1\x83 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2 \xd0\xbc\xd1\x8b \xd0\xb8\xd0\xbc\xd0\xb5\xd0\xb5\xd0\xbc \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf \xd1\x87\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb7 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe:\n        //      msg.value\n    \n        // \xd0\x92\xd1\x8b\xd1\x8f\xd1\x81\xd0\xbd\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2 \xd1\x85\xd0\xb2\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb5 \xd0\xbd\xd0\xb0\xd0\xbc \xd0\xbf\xd1\x80\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb0\xd0\xbb\xd0\xb8\n        amount = msg.value / buyPrice;\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbc\xd1\x8b \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbb\xd0\xb5\xd0\xb6\xd0\xb0\xd1\x82 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n        // \xd0\x9d\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xb0 \xd0\xbf\xd1\x80\xd1\x8f\xd0\xbc\xd0\xbe \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5 \xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xbe\xd1\x87\xd0\xbd\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xba\xd1\x83\xd0\xbf\xd0\xba\xd0\xb8\n        require(amount <= balanceOf[this]);\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xbe\xd0\xba\xd1\x83\xd0\xbf\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8e \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        balanceOf[buyer] += amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbb\xd0\xb5\xd0\xb6\xd0\xb0\xd1\x89\xd0\xb8\xd0\xb5 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n        balanceOf[this] -= amount;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Transfer(this, buyer, amount);\n\n        // \xd0\x92\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xba\xd1\x83\xd0\xbf\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        return amount;\n    }"
      ExpressionStatement
         Source: "require(buyer > 0x0)"
        FunctionCall
           Type: tuple()
           Source: "require(buyer > 0x0)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "buyer > 0x0"
            Identifier buyer
               Type: address
               Source: "buyer"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
      ExpressionStatement
         Source: "amount = msg.value / buyPrice"
        Assignment using operator =
           Type: uint256
           Source: "amount = msg.value / buyPrice"
          Identifier amount
             Type: uint256
             Source: "amount"
          BinaryOperation using operator /
             Type: uint256
             Source: "msg.value / buyPrice"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier buyPrice
               Type: uint256
               Source: "buyPrice"
      ExpressionStatement
         Source: "require(amount <= balanceOf[this])"
        FunctionCall
           Type: tuple()
           Source: "require(amount <= balanceOf[this])"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "amount <= balanceOf[this]"
            Identifier amount
               Type: uint256
               Source: "amount"
            IndexAccess
               Type: uint256
               Source: "balanceOf[this]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier this
                 Type: contract TokenContract
                 Source: "this"
      ExpressionStatement
         Source: "balanceOf[buyer] += amount"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[buyer] += amount"
          IndexAccess
             Type: uint256
             Source: "balanceOf[buyer]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier buyer
               Type: address
               Source: "buyer"
          Identifier amount
             Type: uint256
             Source: "amount"
      ExpressionStatement
         Source: "balanceOf[this] -= amount"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[this] -= amount"
          IndexAccess
             Type: uint256
             Source: "balanceOf[this]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier this
               Type: contract TokenContract
               Source: "this"
          Identifier amount
             Type: uint256
             Source: "amount"
      ExpressionStatement
         Source: "Transfer(this, buyer, amount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(this, buyer, amount)"
          Identifier Transfer
             Type: function (address,address,uint256) constant
             Source: "Transfer"
          Identifier this
             Type: contract TokenContract
             Source: "this"
          Identifier buyer
             Type: address
             Source: "buyer"
          Identifier amount
             Type: uint256
             Source: "amount"
      Return
         Source: "return amount"
        Identifier amount
           Type: uint256
           Source: "amount"
  FunctionDefinition "sell" - public
     Source: "function sell(uint amount) returns (uint revenue){\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd1\x83 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbe\xd0\xbd \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd1\x82\xd1\x8c  \n        require(amount <= balanceOf[msg.sender]);\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x8d\xd1\x82\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n        balanceOf[this] += amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f\n        balanceOf[msg.sender] -= amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xbc\xd1\x8b \xd0\xb5\xd0\xbc\xd1\x83 \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd0\xb4\xd0\xbe\xd0\xbb\xd0\xb6\xd0\xbd\xd1\x8b\n        revenue = amount * sellPrice;\n\n        // sends ether to the seller: it's important\n        require(msg.sender.send(revenue));\n\n        // executes an event reflecting on the change\n        Transfer(msg.sender, this, amount);\n\n        // ends function and returns\n        return revenue;\n    }"
    ParameterList
       Source: "(uint amount)"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint amount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(uint revenue)"
      VariableDeclaration "revenue"
         Type: uint256
         Source: "uint revenue"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd1\x83 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbe\xd0\xbd \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd1\x82\xd1\x8c  \n        require(amount <= balanceOf[msg.sender]);\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x8d\xd1\x82\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n        balanceOf[this] += amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f\n        balanceOf[msg.sender] -= amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xbc\xd1\x8b \xd0\xb5\xd0\xbc\xd1\x83 \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd0\xb4\xd0\xbe\xd0\xbb\xd0\xb6\xd0\xbd\xd1\x8b\n        revenue = amount * sellPrice;\n\n        // sends ether to the seller: it's important\n        require(msg.sender.send(revenue));\n\n        // executes an event reflecting on the change\n        Transfer(msg.sender, this, amount);\n\n        // ends function and returns\n        return revenue;\n    }"
      ExpressionStatement
         Source: "require(amount <= balanceOf[msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(amount <= balanceOf[msg.sender])"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "amount <= balanceOf[msg.sender]"
            Identifier amount
               Type: uint256
               Source: "amount"
            IndexAccess
               Type: uint256
               Source: "balanceOf[msg.sender]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Source: "balanceOf[this] += amount"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[this] += amount"
          IndexAccess
             Type: uint256
             Source: "balanceOf[this]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier this
               Type: contract TokenContract
               Source: "this"
          Identifier amount
             Type: uint256
             Source: "amount"
      ExpressionStatement
         Source: "balanceOf[msg.sender] -= amount"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= amount"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier amount
             Type: uint256
             Source: "amount"
      ExpressionStatement
         Source: "revenue = amount * sellPrice"
        Assignment using operator =
           Type: uint256
           Source: "revenue = amount * sellPrice"
          Identifier revenue
             Type: uint256
             Source: "revenue"
          BinaryOperation using operator *
             Type: uint256
             Source: "amount * sellPrice"
            Identifier amount
               Type: uint256
               Source: "amount"
            Identifier sellPrice
               Type: uint256
               Source: "sellPrice"
      ExpressionStatement
         Source: "require(msg.sender.send(revenue))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender.send(revenue))"
          Identifier require
             Type: function (bool)
             Source: "require"
          FunctionCall
             Type: bool
             Source: "msg.sender.send(revenue)"
            MemberAccess to member send
               Type: function (uint256) returns (bool)
               Source: "msg.sender.send"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier revenue
               Type: uint256
               Source: "revenue"
      ExpressionStatement
         Source: "Transfer(msg.sender, this, amount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, this, amount)"
          Identifier Transfer
             Type: function (address,address,uint256) constant
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier this
             Type: contract TokenContract
             Source: "this"
          Identifier amount
             Type: uint256
             Source: "amount"
      Return
         Source: "return revenue"
        Identifier revenue
           Type: uint256
           Source: "revenue"
ContractDefinition "Proxy"
   Source: "contract Proxy {\n\n    TokenContract public tokenContract;\n\n    string public proxyName;\n\n    function Proxy(\n        TokenContract _tokenContract,\n        string _proxyName\n    ) {\n        tokenContract = _tokenContract;\n        proxyName = _proxyName;\n    }\n\n    function() payable {\n        tokenContract.buyOnBehalfOf.value(msg.value)(msg.sender);\n    }\n}"
  VariableDeclaration "tokenContract"
     Type: contract TokenContract
     Source: "TokenContract public tokenContract"
    UserDefinedTypeName "TokenContract"
       Source: "TokenContract"
  VariableDeclaration "proxyName"
     Type: string storage ref
     Source: "string public proxyName"
    ElementaryTypeName string
       Source: "string"
  FunctionDefinition "Proxy" - public
     Source: "function Proxy(\n        TokenContract _tokenContract,\n        string _proxyName\n    ) {\n        tokenContract = _tokenContract;\n        proxyName = _proxyName;\n    }"
    ParameterList
       Source: "(\n        TokenContract _tokenContract,\n        string _proxyName\n    )"
      VariableDeclaration "_tokenContract"
         Type: contract TokenContract
         Source: "TokenContract _tokenContract"
        UserDefinedTypeName "TokenContract"
           Source: "TokenContract"
      VariableDeclaration "_proxyName"
         Type: string memory
         Source: "string _proxyName"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n        tokenContract = _tokenContract;\n        proxyName = _proxyName;\n    }"
      ExpressionStatement
         Source: "tokenContract = _tokenContract"
        Assignment using operator =
           Type: contract TokenContract
           Source: "tokenContract = _tokenContract"
          Identifier tokenContract
             Type: contract TokenContract
             Source: "tokenContract"
          Identifier _tokenContract
             Type: contract TokenContract
             Source: "_tokenContract"
      ExpressionStatement
         Source: "proxyName = _proxyName"
        Assignment using operator =
           Type: string storage ref
           Source: "proxyName = _proxyName"
          Identifier proxyName
             Type: string storage ref
             Source: "proxyName"
          Identifier _proxyName
             Type: string memory
             Source: "_proxyName"
  FunctionDefinition "" - public
     Source: "function() payable {\n        tokenContract.buyOnBehalfOf.value(msg.value)(msg.sender);\n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{\n        tokenContract.buyOnBehalfOf.value(msg.value)(msg.sender);\n    }"
      ExpressionStatement
         Source: "tokenContract.buyOnBehalfOf.value(msg.value)(msg.sender)"
        FunctionCall
           Type: uint256
           Source: "tokenContract.buyOnBehalfOf.value(msg.value)(msg.sender)"
          FunctionCall
             Type: function (address) payable external returns (uint256)
             Source: "tokenContract.buyOnBehalfOf.value(msg.value)"
            MemberAccess to member value
               Type: function (uint256) returns (function (address) payable external returns (uint256))
               Source: "tokenContract.buyOnBehalfOf.value"
              MemberAccess to member buyOnBehalfOf
                 Type: function (address) payable external returns (uint256)
                 Source: "tokenContract.buyOnBehalfOf"
                Identifier tokenContract
                   Type: contract TokenContract
                   Source: "tokenContract"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
ContractDefinition "Test"
   Source: "contract Test {\n}"
