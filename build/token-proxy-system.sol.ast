PragmaDirective
   Source: "pragma solidity ^0.4.15;"
ContractDefinition "TokenRecipient"
   Source: "contract TokenRecipient {\n\n    // \xd0\x9f\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb8\xd1\x82\xd1\x8c \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x87\xd1\x8c\xd0\xb8\xd1\x85-\xd1\x82\xd0\xbe \xd1\x87\xd1\x83\xd0\xb6\xd0\xb8\xd1\x85 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe-\xd1\x82\xd0\xbe \xd0\xb2\xd0\xb8\xd0\xb4\xd0\xb0\n    function receiveApproval(\n\n    // \xd0\x9a\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbb \xd1\x82\xd0\xb5\xd0\xb1\xd0\xb5 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb8 \xd1\x81 \xd1\x87\xd1\x8c\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x82\xd1\x8b \xd1\x81\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n    address _from,\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x82\xd1\x8b \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n    uint256 _value,\n\n    // \xd0\x90\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xbe\xd0\xb1\xd1\x81\xd0\xbb\xd1\x83\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd1\x8e\xd1\x89\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb2\xd0\xb8\xd0\xb4 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n    address _token,\n\n    // \xd0\x9a\xd0\xb0\xd0\xba\xd0\xb8\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x81 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb8\xd0\xbb \xd0\xba \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb5\xd0\xbc\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8e \n    bytes _extraData\n    );\n}"
  FunctionDefinition "receiveApproval" - public
     Source: "function receiveApproval(\n\n    // \xd0\x9a\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbb \xd1\x82\xd0\xb5\xd0\xb1\xd0\xb5 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb8 \xd1\x81 \xd1\x87\xd1\x8c\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x82\xd1\x8b \xd1\x81\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n    address _from,\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x82\xd1\x8b \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n    uint256 _value,\n\n    // \xd0\x90\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xbe\xd0\xb1\xd1\x81\xd0\xbb\xd1\x83\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd1\x8e\xd1\x89\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb2\xd0\xb8\xd0\xb4 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n    address _token,\n\n    // \xd0\x9a\xd0\xb0\xd0\xba\xd0\xb8\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x81 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb8\xd0\xbb \xd0\xba \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb5\xd0\xbc\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8e \n    bytes _extraData\n    );"
    ParameterList
       Source: "(\n\n    // \xd0\x9a\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbb \xd1\x82\xd0\xb5\xd0\xb1\xd0\xb5 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb8 \xd1\x81 \xd1\x87\xd1\x8c\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x82\xd1\x8b \xd1\x81\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n    address _from,\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x82\xd1\x8b \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x88\xd1\x8c \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n    uint256 _value,\n\n    // \xd0\x90\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xbe\xd0\xb1\xd1\x81\xd0\xbb\xd1\x83\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd1\x8e\xd1\x89\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb2\xd0\xb8\xd0\xb4 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n    address _token,\n\n    // \xd0\x9a\xd0\xb0\xd0\xba\xd0\xb8\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x81 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb8\xd0\xbb \xd0\xba \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb5\xd0\xbc\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8e \n    bytes _extraData\n    )"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_token"
         Type: address
         Source: "address _token"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_extraData"
         Type: bytes memory
         Source: "bytes _extraData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
ContractDefinition "Owned"
   Source: "contract Owned {\n\n    address public owner;\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}"
  VariableDeclaration "owner"
     Type: address
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Owned" - public
     Source: "function Owned() {\n        owner = msg.sender;\n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{\n        owner = msg.sender;\n    }"
      ExpressionStatement
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }"
    ParameterList
       Source: ""
    Block
       Source: "{\n        require(msg.sender == owner);\n        _;\n    }"
      ExpressionStatement
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }"
    ParameterList
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    ModifierInvocation "onlyOwner"
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\n        owner = newOwner;\n    }"
      ExpressionStatement
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
ContractDefinition "Token"
   Source: "contract Token is Owned {\n\n    // \xd0\x9f\xd1\x83\xd0\xb1\xd0\xbb\xd0\xb8\xd1\x87\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0.\n\n    // \xd0\x9a\xd0\xb0\xd0\xb6\xd0\xb4\xd1\x8b\xd0\xb9 \xd1\x81\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x82 \xd1\x83\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb8\xd1\x85 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f.\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    // \xd0\x92\xd0\xb5\xd1\x80\xd1\x81\xd0\xb8\xd1\x8f \xd0\xb8\xd0\xbd\xd1\x82\xd0\xb5\xd1\x80\xd1\x84\xd0\xb5\xd0\xb9\xd1\x81\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    string public standard = 'Token 0.1';\n\n    // \xd0\x9d\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    string public name;\n\n    // \xd0\xa1\xd0\xb8\xd0\xbc\xd0\xb2\xd0\xbe\xd0\xbb \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    string public symbol;\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd1\x87\xd0\xb5\xd0\xba \xd0\xbf\xd0\xbe\xd1\x81\xd0\xbb\xd0\xb5 \xd0\xb7\xd0\xb0\xd0\xbf\xd1\x8f\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x83 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xb9 \xd0\xbc\xd0\xb0\xd0\xbb\xd0\xb5\xd0\xbd\xd1\x8c\xd0\xba\xd0\xbe\xd0\xb9 \xd0\xb4\xd0\xbe\xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xb8\xd0\xbc\xd0\xbe\xd0\xb9 \xd0\xb4\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xb8 \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    uint8 public decimals;\n\n    // \xd0\xa1\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x81\xd0\xb5\xd0\xb9\xd1\x87\xd0\xb0\xd1\x81 \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xb2\xd1\x81\xd0\xb5\xd0\xb3\xd0\xbe\n    uint256 public totalSupply;\n\n    // \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd0\xb0\n    mapping (address => uint256) public balanceOf;\n\n    // \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd0\xbe\xd0\xb2 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb4\xd1\x80\xd1\x83\xd0\xb7\xd0\xb5\xd0\xb9 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0, \xd1\x83 \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // \xd0\xa1\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5 \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb5 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc,\xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbb \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4 \xd1\x81\xd1\x80\xd0\xb5\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2: \xd0\xba\xd1\x82\xd0\xbe, \xd0\xba\xd0\xbe\xd0\xbc\xd1\x83, \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // \xd0\xa1\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbd\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd0\xbb \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n    event Burn(address indexed from, uint256 value);\n\n    // \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n    // \xd0\xa3\xd0\xba\xd0\xb0\xd0\xb7\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbd\xd0\xb5 \xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xbd\xd0\xbe \xd0\xb8 \xd0\xbe\xd1\x82\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd1\x85\xd0\xb0\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5\xd1\x80\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0\n    // \xd0\x92\xd0\xbe\xd0\xbf\xd1\x80\xd0\xbe\xd1\x81. \xd0\x9c\xd1\x8b \xd1\x8d\xd1\x82\xd0\xbe\xd1\x82 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82 \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd0\xbc \xd0\xba\xd0\xbe\xd0\xbc\xd0\xbf\xd0\xb8\xd0\xbb\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb8 \xd0\xb4\xd0\xb5\xd0\xbf\xd0\xbb\xd0\xbe\xd0\xb8\xd1\x82\xd1\x8c \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb9-\xd1\x82\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb7\xd0\xb0\xd0\xba\xd1\x86\xd0\xb8\xd0\xb5\xd0\xb9. \n    // \xd0\x93\xd0\xb4\xd0\xb5 \xd0\xbc\xd1\x8b \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd0\xbc \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd1\x8b\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbf\xd0\xb0\xd1\x80\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80\xd1\x8b \xd0\xb4\xd0\xbb\xd1\x8f \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8? \xd0\xad\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xba\xd0\xbe\xd0\xbc\xd0\xbf\xd0\xb8\xd0\xbb\xd1\x8f\xd1\x86\xd0\xb8\xd0\xb8? \xd0\xad\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xb4\xd0\xb5\xd0\xbf\xd0\xbb\xd0\xbe\xd0\xb5? \n    // \xd0\x9a\xd0\xb0\xd0\xba \xd0\xba\xd0\xbe\xd0\xbd\xd0\xba\xd1\x80\xd0\xb5\xd1\x82\xd0\xbd\xd0\xbe \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd1\x8b\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd1\x8d\xd1\x82\xd0\xb8 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f?\n    function Token(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        uint256 _buyPrice,\n        uint256 _sellPrice\n    ) {\n        owner = msg.sender;\n\n        // \xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbc \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[this] = initialSupply;\n\n        // \xd0\xa3\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81 \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xb0\xd1\x81\xd0\xbe\xd0\xbc\n        totalSupply = initialSupply;\n\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n\n        buyPrice = _buyPrice;\n        sellPrice = _sellPrice;\n    }\n\n    function getName() returns (string _name){\n        return name;\n    }\n\n    // \xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\n    function transfer(address _to, uint256 _value) {\n\n        uint256 balanceTo = balanceOf[_to];\n        \n        uint256 balanceFrom = balanceOf[msg.sender];\n\n        // \xd0\x95\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x8b\xd1\x82\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82, \xd1\x82\xd0\xbe \xd0\xb2\xd1\x8b\xd0\xb1\xd1\x80\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb8\xd1\x81\xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceFrom >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbc\xd1\x8b \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x82\xd0\xb0\xd0\xba\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd1\x83 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83, \xd0\xb8 \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbe\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xb0\xd0\xbb\xd0\xb0 \xd0\xbd\xd0\xb5 \xd0\xb1\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb5, \xd0\xb0 \xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb5, \n        // \xd1\x82\xd0\xbe \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd1\x82, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(balanceTo + _value >= balanceTo);\n    \n        // \xd0\x9e\xd1\x82\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[msg.sender] = balanceFrom - _value;\n        \n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xba \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] = balanceTo + _value;\n        \n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        //Transfer(msg.sender, _to, _value);\n    }\n\n    // \xd0\x92\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd1\x82 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xbc\xd1\x83 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x85 \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe-\xd1\x82\xd0\xbe \xd0\xbc\xd0\xb0\xd0\xba\xd1\x81\xd0\xb8\xd0\xbc\xd1\x83\xd0\xbc\xd0\xb0\n    // \xd0\x92\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd0\xba\xd0\xb0\xd0\xba \xd0\xb1\xd1\x8b \xd0\xbe\xd1\x82\xd0\xba\xd1\x80\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd1\x82 \xd0\xb2\xd0\xbd\xd1\x83\xd1\x82\xd1\x80\xd0\xb8 \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xb5\xd1\x89\xd0\xb5 \xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbd \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8\n    // \xd0\x9f\xd0\xbe \xd0\xb8\xd0\xbd\xd1\x82\xd0\xb5\xd1\x80\xd1\x84\xd0\xb5\xd0\xb9\xd1\x81\xd1\x83, \xd1\x8d\xd1\x82\xd0\xbe\xd1\x82 \xd0\xbc\xd0\xb5\xd1\x82\xd0\xbe\xd0\xb4 \xd0\xb4\xd0\xbe\xd0\xbb\xd0\xb6\xd0\xb5\xd0\xbd \xd0\xb2\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd1\x82\xd1\x8c \xd1\x84\xd0\xbb\xd0\xb0\xd0\xb3 \xd1\x83\xd1\x81\xd0\xbf\xd0\xb5\xd1\x88\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8\n    // \xd0\x9d\xd0\xb0\xd1\x88\xd0\xb0 \xd1\x80\xd0\xb5\xd0\xb0\xd0\xbb\xd0\xb8\xd0\xb7\xd0\xb0\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb2\xd1\x81\xd0\xb5\xd0\xb3\xd0\xb4\xd0\xb0 \xd0\xb2\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd1\x82 true\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /*\n    \n    // \xd0\x92\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb4\xd0\xb0\xd0\xb5\xd1\x82 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xbc\xd1\x83 \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd1\x83 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x81 \xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n    // \xd0\x9f\xd1\x80\xd0\xb8\xd1\x87\xd0\xb5\xd0\xbc, \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 - \xd1\x8d\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82, \xd1\x83 \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbc\xd0\xb5\xd1\x82\xd0\xbe\xd0\xb4, \xd1\x87\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb7 \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb9 \xd0\xb5\xd0\xb3\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe \xd1\x83\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xb8\xd1\x82\xd1\x8c, \n    // \xd1\x87\xd1\x82\xd0\xbe \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd0\xbe\xd0\xbd \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x82 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n\n        // \xd0\xa3\xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c\xd1\x81\xd1\x8f, \xd1\x87\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82 \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x83\xd1\x87\xd0\xb0\xd1\x81\xd1\x82\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd1\x82 \xd1\x83\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbe \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb5 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b\n        TokenRecipient spender = TokenRecipient(_spender);\n\n        // \xd0\x94\xd0\xb0\xd1\x82\xd1\x8c \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        if (approve(_spender, _value)) {\n\n            // \xd0\xa3\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbc\xd0\xb8\xd1\x82\xd1\x8c, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbe \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }\n    }\n\n    // \xd0\x9d\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe, \xd0\xba\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd0\xbd\xd0\xb5\xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb4\xd0\xb0\xd0\xbb \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \n    // \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd1\x8d\xd1\x82\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb9-\xd1\x82\xd0\xbe \xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe\xd0\xb1\xd1\x8b \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbd\xd1\x83\xd0\xbb\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\n        require(_to > 0x0);\n    \n        uint256 balanceFrom = balanceOf[_from];\n        uint256 balanceTo = balanceOf[_to];\n        \n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        require(balanceFrom >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbd\xd0\xb5 \xd0\xbb\xd0\xbe\xd0\xbf\xd0\xbd\xd0\xb5\xd1\x82 \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        require(balanceTo + _value >= balanceTo);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe \xd0\xbb\xd0\xb8 \xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd1\x83 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        require(_value <= allowance[_from][msg.sender]);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        balanceOf[_from] -= _value;\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] += _value;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xb8\xd0\xb7 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd1\x83 \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81 \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        allowance[_from][msg.sender] -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xb0 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb0\xd1\x87\xd0\xb0 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85\n        //Transfer(_from, _to, _value);\n\n        // \xd0\xa1\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd0\xb7\xd0\xb0\xd0\xba\xd0\xbe\xd0\xbd\xd1\x87\xd0\xb8\xd0\xbb\xd0\xbe\xd1\x81\xd1\x8c \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\n        return true;\n    }\n\n    // \xd0\x92\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x86 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb8 \xd1\x81\xd1\x80\xd0\xb5\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0\n    function burn(uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[msg.sender] >= _value);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd1\x81 \xd0\xb5\xd0\xb3\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0\n        balanceOf[msg.sender] -= _value;\n\n        // \xd0\xa3\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Burn(msg.sender, _value);\n\n        return true;\n    }\n\n    // \xd0\x94\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd0\xbe\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0\n    function burnFrom(address _from, uint256 _value) returns (bool success) {\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd1\x85\xd0\xbe\xd0\xb7\xd1\x8f\xd0\xb8\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceOf[_from] >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd\xd0\xbe \xd0\xbb\xd0\xb8 \xd0\xb4\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xbb\xd0\xb8\xd1\x86\xd1\x83 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n        require(_value <= allowance[_from][msg.sender]);\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0\n        balanceOf[_from] -= _value;\n\n        // \xd0\xa3\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply -= _value;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb0 \xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd1\x83 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Burn(_from, _value);\n\n        // \xd0\x92\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\n        return true;\n    }\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd1\x8c \xd0\xba\xd0\xbe\xd0\xbc\xd1\x83-\xd1\x82\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        balanceOf[target] += mintedAmount;\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd1\x8c \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        totalSupply += mintedAmount;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbb \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3 \xd0\xb8\xd0\xb7 \xd0\xbd\xd0\xb8\xd0\xbe\xd1\x82\xd0\xba\xd1\x83\xd0\xb4\xd0\xb0 \xd0\xbd\xd0\xb0 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n        Transfer(0, this, mintedAmount);\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3 \xd0\xbe\xd1\x82 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x88\xd1\x8c \xd0\xb2\xd1\x8b\xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c\n        if (target != address(this)) {\n            Transfer(this, target, mintedAmount);\n        }\n    }\n\n    function getBalance(address account) returns (uint256 amount) {\n        return balanceOf[account];\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function() payable onlyOwner {\n    }\n\n    // \xd0\x9d\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb0\xd0\xbb \xd0\xbd\xd0\xb0\xd0\xbc \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd1\x87\xd1\x82\xd0\xbe\xd0\xb1\xd1\x8b \xd0\xba\xd1\x83\xd0\xbf\xd0\xb8\xd1\x82\xd1\x8c \xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb8\xd1\x85 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xbf\xd0\xbe \xd1\x82\xd0\xb5\xd0\xba\xd1\x83\xd1\x89\xd0\xb5\xd0\xb9 \xd1\x86\xd0\xb5\xd0\xbd\xd0\xb5\n    function buyOnBehalfOf(address buyer) payable returns (uint amount) {\n        \n        require(buyer > 0x0);\n    \n        // \xd0\x9a \xd0\xbd\xd0\xb0\xd0\xbc \xd0\xb2 \xd1\x82\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb7\xd0\xb0\xd0\xba\xd1\x86\xd0\xb8\xd1\x8e \xd0\xbf\xd1\x80\xd0\xb8\xd1\x88\xd0\xbb\xd0\xbe \xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5-\xd1\x82\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2\n        // \xd0\x9a \xd1\x8d\xd1\x82\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd1\x83 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2 \xd0\xbc\xd1\x8b \xd0\xb8\xd0\xbc\xd0\xb5\xd0\xb5\xd0\xbc \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf \xd1\x87\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb7 \xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb5 \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe:\n        //      msg.value\n    \n        // \xd0\x92\xd1\x8b\xd1\x8f\xd1\x81\xd0\xbd\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2 \xd1\x85\xd0\xb2\xd0\xb0\xd1\x82\xd0\xb8\xd1\x82 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb5 \xd0\xbd\xd0\xb0\xd0\xbc \xd0\xbf\xd1\x80\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb0\xd0\xbb\xd0\xb8\n        amount = msg.value / buyPrice;\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbc\xd1\x8b \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbb\xd0\xb5\xd0\xb6\xd0\xb0\xd1\x82 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n        // \xd0\x9d\xd0\xb5 \xd0\xb2\xd0\xbb\xd0\xb0\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x86\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0, \xd0\xb0 \xd0\xbf\xd1\x80\xd1\x8f\xd0\xbc\xd0\xbe \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbd\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5 \xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xbe\xd1\x87\xd0\xbd\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xba\xd1\x83\xd0\xbf\xd0\xba\xd0\xb8\n        require(amount <= balanceOf[this]);\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xbe\xd0\xba\xd1\x83\xd0\xbf\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8e \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        balanceOf[buyer] += amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b, \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbb\xd0\xb5\xd0\xb6\xd0\xb0\xd1\x89\xd0\xb8\xd0\xb5 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd1\x83\n        balanceOf[this] -= amount;\n\n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        Transfer(this, buyer, amount);\n\n        // \xd0\x92\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xba\xd1\x83\xd0\xbf\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        return amount;\n    }\n\n    // \xd0\x9d\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82 \xd0\xb7\xd0\xb0\xd0\xb1\xd1\x80\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb5\xd0\xb3\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xb8 \xd0\xb2\xd1\x8b\xd1\x81\xd0\xbb\xd0\xb0\xd1\x82\xd1\x8c \xd0\xb5\xd0\xbc\xd1\x83 \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xb2 \xd1\x81\xd0\xbe\xd0\xbe\xd1\x82\xd0\xb2\xd0\xb5\xd1\x82\xd1\x81\xd1\x82\xd0\xb2\xd0\xb8\xd0\xb8 \xd1\x81 \xd1\x82\xd0\xb5\xd0\xba\xd1\x83\xd1\x89\xd0\xb5\xd0\xb9 \xd1\x86\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd0\xb6\xd0\xb8\n    function sell(uint amount) returns (uint revenue){\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe \xd1\x83 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2, \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbe\xd0\xbd \xd1\x85\xd0\xbe\xd1\x87\xd0\xb5\xd1\x82 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0\xd1\x82\xd1\x8c  \n        require(amount <= balanceOf[msg.sender]);\n\n        // \xd0\x94\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x8d\xd1\x82\xd0\xb8 \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbd\xd0\xb0 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82 \xd1\x81\xd0\xb0\xd0\xbc\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xbe\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb0\n        balanceOf[this] += amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd1\x8b \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xbe\xd0\xb1\xd1\x89\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f\n        balanceOf[msg.sender] -= amount;\n\n        // \xd0\x92\xd1\x8b\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x8d\xd1\x84\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2, \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd0\xb5 \xd0\xbc\xd1\x8b \xd0\xb5\xd0\xbc\xd1\x83 \xd1\x82\xd0\xb5\xd0\xbf\xd0\xb5\xd1\x80\xd1\x8c \xd0\xb4\xd0\xbe\xd0\xbb\xd0\xb6\xd0\xbd\xd1\x8b\n        revenue = amount * sellPrice;\n\n        // sends ether to the seller: it's important\n        require(msg.sender.send(revenue));\n\n        // executes an event reflecting on the change\n        Transfer(msg.sender, this, amount);\n\n        // ends function and returns\n        return revenue;\n    }\n    */\n}"
  InheritanceSpecifier
     Source: "Owned"
    UserDefinedTypeName "Owned"
       Source: "Owned"
  VariableDeclaration "sellPrice"
     Type: uint256
     Source: "uint256 public sellPrice"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "buyPrice"
     Type: uint256
     Source: "uint256 public buyPrice"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "standard"
     Type: string storage ref
     Source: "string public standard = 'Token 0.1'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Token 0.1
       Type: literal_string "Token 0.1"
       Source: "'Token 0.1'"
  VariableDeclaration "name"
     Type: string storage ref
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "symbol"
     Type: string storage ref
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Source: "mapping (address => uint256) public balanceOf"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowance"
     Type: mapping(address => mapping(address => uint256))
     Source: "mapping (address => mapping (address => uint256)) public allowance"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed from, address indexed to, uint256 value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Burn"
     Source: "event Burn(address indexed from, uint256 value);"
    ParameterList
       Source: "(address indexed from, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "Token" - public
     Source: "function Token(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        uint256 _buyPrice,\n        uint256 _sellPrice\n    ) {\n        owner = msg.sender;\n\n        // \xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbc \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[this] = initialSupply;\n\n        // \xd0\xa3\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81 \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xb0\xd1\x81\xd0\xbe\xd0\xbc\n        totalSupply = initialSupply;\n\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n\n        buyPrice = _buyPrice;\n        sellPrice = _sellPrice;\n    }"
    ParameterList
       Source: "(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        uint256 _buyPrice,\n        uint256 _sellPrice\n    )"
      VariableDeclaration "initialSupply"
         Type: uint256
         Source: "uint256 initialSupply"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "tokenName"
         Type: string memory
         Source: "string tokenName"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "decimalUnits"
         Type: uint8
         Source: "uint8 decimalUnits"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "tokenSymbol"
         Type: string memory
         Source: "string tokenSymbol"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_buyPrice"
         Type: uint256
         Source: "uint256 _buyPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sellPrice"
         Type: uint256
         Source: "uint256 _sellPrice"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n        owner = msg.sender;\n\n        // \xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbc \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[this] = initialSupply;\n\n        // \xd0\xa3\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81 \xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xb0\xd1\x81\xd0\xbe\xd0\xbc\n        totalSupply = initialSupply;\n\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n\n        buyPrice = _buyPrice;\n        sellPrice = _sellPrice;\n    }"
      ExpressionStatement
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Source: "balanceOf[this] = initialSupply"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[this] = initialSupply"
          IndexAccess
             Type: uint256
             Source: "balanceOf[this]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier this
               Type: contract Token
               Source: "this"
          Identifier initialSupply
             Type: uint256
             Source: "initialSupply"
      ExpressionStatement
         Source: "totalSupply = initialSupply"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = initialSupply"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier initialSupply
             Type: uint256
             Source: "initialSupply"
      ExpressionStatement
         Source: "name = tokenName"
        Assignment using operator =
           Type: string storage ref
           Source: "name = tokenName"
          Identifier name
             Type: string storage ref
             Source: "name"
          Identifier tokenName
             Type: string memory
             Source: "tokenName"
      ExpressionStatement
         Source: "symbol = tokenSymbol"
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = tokenSymbol"
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Identifier tokenSymbol
             Type: string memory
             Source: "tokenSymbol"
      ExpressionStatement
         Source: "decimals = decimalUnits"
        Assignment using operator =
           Type: uint8
           Source: "decimals = decimalUnits"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Identifier decimalUnits
             Type: uint8
             Source: "decimalUnits"
      ExpressionStatement
         Source: "buyPrice = _buyPrice"
        Assignment using operator =
           Type: uint256
           Source: "buyPrice = _buyPrice"
          Identifier buyPrice
             Type: uint256
             Source: "buyPrice"
          Identifier _buyPrice
             Type: uint256
             Source: "_buyPrice"
      ExpressionStatement
         Source: "sellPrice = _sellPrice"
        Assignment using operator =
           Type: uint256
           Source: "sellPrice = _sellPrice"
          Identifier sellPrice
             Type: uint256
             Source: "sellPrice"
          Identifier _sellPrice
             Type: uint256
             Source: "_sellPrice"
  FunctionDefinition "getName" - public
     Source: "function getName() returns (string _name){\n        return name;\n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(string _name)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\n        return name;\n    }"
      Return
         Source: "return name"
        Identifier name
           Type: string storage ref
           Source: "name"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) {\n\n        uint256 balanceTo = balanceOf[_to];\n        \n        uint256 balanceFrom = balanceOf[msg.sender];\n\n        // \xd0\x95\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x8b\xd1\x82\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82, \xd1\x82\xd0\xbe \xd0\xb2\xd1\x8b\xd0\xb1\xd1\x80\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb8\xd1\x81\xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceFrom >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbc\xd1\x8b \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x82\xd0\xb0\xd0\xba\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd1\x83 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83, \xd0\xb8 \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbe\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xb0\xd0\xbb\xd0\xb0 \xd0\xbd\xd0\xb5 \xd0\xb1\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb5, \xd0\xb0 \xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb5, \n        // \xd1\x82\xd0\xbe \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd1\x82, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(balanceTo + _value >= balanceTo);\n    \n        // \xd0\x9e\xd1\x82\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[msg.sender] = balanceFrom - _value;\n        \n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xba \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] = balanceTo + _value;\n        \n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        //Transfer(msg.sender, _to, _value);\n    }"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
    Block
       Source: "{\n\n        uint256 balanceTo = balanceOf[_to];\n        \n        uint256 balanceFrom = balanceOf[msg.sender];\n\n        // \xd0\x95\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbd\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe \xd0\xbf\xd1\x8b\xd1\x82\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82, \xd1\x82\xd0\xbe \xd0\xb2\xd1\x8b\xd0\xb1\xd1\x80\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb8\xd1\x81\xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(_to > 0x0);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xbe\xd0\xba\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xb2\n        require(balanceFrom >= _value);\n\n        // \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xbb\xd0\xb8 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbc\xd1\x8b \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd1\x82\xd0\xb0\xd0\xba\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83\n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81\xd1\x83 \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0-\xd0\xbd\xd0\xb0\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83, \xd0\xb8 \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xbe\xd0\xbd\xd0\xb0 \xd1\x81\xd1\x82\xd0\xb0\xd0\xbb\xd0\xb0 \xd0\xbd\xd0\xb5 \xd0\xb1\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb5, \xd0\xb0 \xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb5, \n        // \xd1\x82\xd0\xbe \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd1\x82, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        require(balanceTo + _value >= balanceTo);\n    \n        // \xd0\x9e\xd1\x82\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd1\x81\xd0\xbe \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[msg.sender] = balanceFrom - _value;\n        \n        // \xd0\x9f\xd1\x80\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xba \xd1\x81\xd1\x87\xd0\xb5\xd1\x82\xd1\x83 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8f\n        balanceOf[_to] = balanceTo + _value;\n        \n        // \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xbb\xd0\xbe\xd0\xb3 \xd1\x81\xd0\xbe\xd0\xb1\xd1\x8b\xd1\x82\xd0\xb8\xd0\xb5, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb8\xd0\xb7\xd0\xbe\xd1\x88\xd0\xbb\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb5\xd0\xb3\n        //Transfer(msg.sender, _to, _value);\n    }"
      VariableDeclarationStatement
         Source: "uint256 balanceTo = balanceOf[_to]"
        VariableDeclaration "balanceTo"
           Type: uint256
           Source: "uint256 balanceTo"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balanceOf[_to]"
          Identifier balanceOf
             Type: mapping(address => uint256)
             Source: "balanceOf"
          Identifier _to
             Type: address
             Source: "_to"
      VariableDeclarationStatement
         Source: "uint256 balanceFrom = balanceOf[msg.sender]"
        VariableDeclaration "balanceFrom"
           Type: uint256
           Source: "uint256 balanceFrom"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balanceOf[msg.sender]"
          Identifier balanceOf
             Type: mapping(address => uint256)
             Source: "balanceOf"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Source: "require(_to > 0x0)"
        FunctionCall
           Type: tuple()
           Source: "require(_to > 0x0)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_to > 0x0"
            Identifier _to
               Type: address
               Source: "_to"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
      ExpressionStatement
         Source: "require(balanceFrom >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceFrom >= _value)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceFrom >= _value"
            Identifier balanceFrom
               Type: uint256
               Source: "balanceFrom"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Source: "require(balanceTo + _value >= balanceTo)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceTo + _value >= balanceTo)"
          Identifier require
             Type: function (bool)
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceTo + _value >= balanceTo"
            BinaryOperation using operator +
               Type: uint256
               Source: "balanceTo + _value"
              Identifier balanceTo
                 Type: uint256
                 Source: "balanceTo"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            Identifier balanceTo
               Type: uint256
               Source: "balanceTo"
      ExpressionStatement
         Source: "balanceOf[msg.sender] = balanceFrom - _value"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[msg.sender] = balanceFrom - _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator -
             Type: uint256
             Source: "balanceFrom - _value"
            Identifier balanceFrom
               Type: uint256
               Source: "balanceFrom"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Source: "balanceOf[_to] = balanceTo + _value"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[_to] = balanceTo + _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          BinaryOperation using operator +
             Type: uint256
             Source: "balanceTo + _value"
            Identifier balanceTo
               Type: uint256
               Source: "balanceTo"
            Identifier _value
               Type: uint256
               Source: "_value"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }"
      ExpressionStatement
         Source: "allowance[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowance[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowance[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[msg.sender]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
ContractDefinition "Proxy"
   Source: "contract Proxy {\n\n    Token public token;\n\n    function Proxy(Token _token) {\n        token = _token;\n    }\n\n    function() payable {\n        //token.buyOnBehalfOf.value(msg.value)(msg.sender);\n    }\n}"
  VariableDeclaration "token"
     Type: contract Token
     Source: "Token public token"
    UserDefinedTypeName "Token"
       Source: "Token"
  FunctionDefinition "Proxy" - public
     Source: "function Proxy(Token _token) {\n        token = _token;\n    }"
    ParameterList
       Source: "(Token _token)"
      VariableDeclaration "_token"
         Type: contract Token
         Source: "Token _token"
        UserDefinedTypeName "Token"
           Source: "Token"
    ParameterList
       Source: ""
    Block
       Source: "{\n        token = _token;\n    }"
      ExpressionStatement
         Source: "token = _token"
        Assignment using operator =
           Type: contract Token
           Source: "token = _token"
          Identifier token
             Type: contract Token
             Source: "token"
          Identifier _token
             Type: contract Token
             Source: "_token"
  FunctionDefinition "" - public
     Source: "function() payable {\n        //token.buyOnBehalfOf.value(msg.value)(msg.sender);\n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{\n        //token.buyOnBehalfOf.value(msg.value)(msg.sender);\n    }"
